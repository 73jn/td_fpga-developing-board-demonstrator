--
-- VHDL Architecture Poetic_test.poetic_test.struct
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 11:17:48 15.08.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Messy_test;
LIBRARY Poetic;
LIBRARY Poetic_test;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF poetic_test IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL ADC0_CS    : std_ulogic;
    SIGNAL ADC_SCLK   : std_ulogic;
    SIGNAL D          : std_ulogic;
    SIGNAL DAC0_SCLK  : std_ulogic;
    SIGNAL DAC0_SDO   : std_ulogic;
    SIGNAL DAC0_SYNC  : std_ulogic;
    SIGNAL I          : std_ulogic;
    SIGNAL P          : std_ulogic;
    SIGNAL SDO        : std_ulogic;
    SIGNAL USB_RX     : std_ulogic;
    SIGNAL USB_TX     : std_ulogic;
    SIGNAL Vapp       : unsigned(11 DOWNTO 0);
    SIGNAL clock      : std_logic;
    SIGNAL clockOut   : std_ulogic;
    SIGNAL enable     : std_ulogic;
    SIGNAL ledState_0 : std_ulogic;
    SIGNAL ledState_1 : std_ulogic;
    SIGNAL lowpassIn  : unsigned(11 DOWNTO 0);
    SIGNAL reset      : std_logic;
    SIGNAL serialOut  : std_ulogic;
    SIGNAL speed      : std_ulogic_vector(11 DOWNTO 0);


    -- Component Declarations
    COMPONENT poetic_tester
    GENERIC (
        baudRate       : real     := 9600.0;
        clockFrequency : real     := 66.0E6;
        dataBitNb      : positive := 8
    );
    PORT (
        ledState_1 : IN     std_ulogic ;
        ledState_0 : IN     std_ulogic ;
        DAC0_SCLK  : IN     std_ulogic ;
        DAC0_SYNC  : IN     std_ulogic ;
        DAC0_SDO   : IN     std_ulogic ;
        USB_TX     : OUT    std_ulogic ;
        USB_RX     : IN     std_ulogic ;
        P          : OUT    std_ulogic ;
        I          : OUT    std_ulogic ;
        D          : OUT    std_ulogic ;
        enable     : OUT    std_ulogic ;
        clock      : OUT    std_logic ;
        reset      : OUT    std_logic 
    );
    END COMPONENT;
    COMPONENT SimplePoeticDcMotor
    GENERIC (
        dataBitNb           : positive := 8;
        pidBitNb            : positive := 12;
        adcBitNb            : positive := 12;
        dacBitNb            : positive := 8;
        dacChBitNb          : positive := 2;
        dacOpBitNb          : positive := 2;
        uartBitNb           : positive := 8;
        uartTxFifo          : positive := 8;
        uartRxFifo          : positive := 8;
        fpgaFrequency       : integer  := 100000000;
        dacFrequency        : integer  := 40000000;
        adcFrequency        : integer  := 20000000;
        pwmBitNb            : positive := 12;
        clockDividerBitNb   : positive := 30;
        uartUpdateFrequency : integer  := 1;
        ledFrequency        : integer  := 1;
        uartBaudRateDivide  : integer  := 10417
    );
    PORT (
        ADC0_SDO   : IN     std_ulogic ;
        D          : IN     std_ulogic ;
        I          : IN     std_ulogic ;
        P          : IN     std_ulogic ;
        USB_TX     : IN     std_ulogic ;
        clock      : IN     std_ulogic ;
        enable     : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        ADC0_CS    : OUT    std_ulogic ;
        ADC_SCLK   : OUT    std_ulogic ;
        DAC0_SCLK  : OUT    std_ulogic ;
        DAC0_SDO   : OUT    std_ulogic ;
        DAC0_SYNC  : OUT    std_ulogic ;
        PWM_out    : OUT    std_ulogic ;
        USB_RX     : OUT    std_ulogic ;
        ledState_0 : OUT    std_ulogic ;
        ledState_1 : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT clockGenerator
    GENERIC (
        counterBitNb : integer := 12;
        frequencyIn  : integer := 100000000;
        frequencyOut : integer := 20000000
    );
    PORT (
        clock    : IN     std_ulogic ;
        enable   : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        clockOut : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT AD
    GENERIC (
        adcBitNb : positive := 12
    );
    PORT (
        CS_n       : IN     std_ulogic ;
        DataToSend : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        SCLK       : IN     std_ulogic ;
        clock      : IN     std_logic ;
        reset      : IN     std_logic ;
        SDO        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT motor
    PORT (
        Vapp  : IN     unsigned (11 DOWNTO 0);
        clock : IN     std_logic ;
        reset : IN     std_logic ;
        speed : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT lowpass
    GENERIC (
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT (
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : AD USE ENTITY Poetic_test.AD;
    FOR ALL : SimplePoeticDcMotor USE ENTITY Poetic.SimplePoeticDcMotor;
    FOR ALL : clockGenerator USE ENTITY Poetic.clockGenerator;
    FOR ALL : lowpass USE ENTITY WaveformGenerator.lowpass;
    FOR ALL : motor USE ENTITY Poetic_test.motor;
    FOR ALL : poetic_tester USE ENTITY Messy_test.poetic_tester;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    -- eb1 1                                        
    LowpassIn <= (others => serialOut);


    -- Instance port mappings.
    I_tester : poetic_tester
        GENERIC MAP (
            baudRate       => 9600.0,
            clockFrequency => 100.0E6,
            dataBitNb      => 8
        )
        PORT MAP (
            DAC0_SCLK  => DAC0_SCLK,
            DAC0_SDO   => DAC0_SDO,
            DAC0_SYNC  => DAC0_SYNC,
            USB_RX     => USB_RX,
            ledState_0 => ledState_0,
            ledState_1 => ledState_1,
            D          => D,
            I          => I,
            P          => P,
            USB_TX     => USB_TX,
            clock      => clock,
            enable     => enable,
            reset      => reset
        );
    I1 : SimplePoeticDcMotor
        GENERIC MAP (
            dataBitNb           => 8,
            pidBitNb            => 12,
            adcBitNb            => 12,
            dacBitNb            => 8,
            dacChBitNb          => 2,
            dacOpBitNb          => 2,
            uartBitNb           => 8,
            uartTxFifo          => 8,
            uartRxFifo          => 8,
            fpgaFrequency       => 100000000,
            dacFrequency        => 40000000,
            adcFrequency        => 20000000,
            pwmBitNb            => 12,
            clockDividerBitNb   => 30,
            uartUpdateFrequency => 500000,
            ledFrequency        => 500000,
            uartBaudRateDivide  => 10417
        )
        PORT MAP (
            ADC0_SDO   => SDO,
            D          => D,
            I          => I,
            P          => P,
            USB_TX     => USB_TX,
            clock      => clock,
            enable     => enable,
            reset      => reset,
            ADC0_CS    => ADC0_CS,
            ADC_SCLK   => ADC_SCLK,
            DAC0_SCLK  => DAC0_SCLK,
            DAC0_SDO   => DAC0_SDO,
            DAC0_SYNC  => DAC0_SYNC,
            PWM_out    => serialOut,
            USB_RX     => USB_RX,
            ledState_0 => ledState_0,
            ledState_1 => ledState_1
        );
    I3 : clockGenerator
        GENERIC MAP (
            counterBitNb => 12,
            frequencyIn  => 100E6,
            frequencyOut => 50E6
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => clockOut
        );
    I2 : AD
        GENERIC MAP (
            adcBitNb => 12
        )
        PORT MAP (
            CS_n       => ADC0_CS,
            DataToSend => speed,
            SCLK       => ADC_SCLK,
            clock      => clock,
            reset      => reset,
            SDO        => SDO
        );
    I0 : motor
        PORT MAP (
            Vapp  => Vapp,
            clock => clock,
            reset => reset,
            speed => speed
        );
    I4 : lowpass
        GENERIC MAP (
            signalBitNb => 12,
            shiftBitNb  => 16
        )
        PORT MAP (
            lowpassOut => Vapp,
            clock      => clock,
            reset      => reset,
            lowpassIn  => lowpassIn
        );

END struct;
