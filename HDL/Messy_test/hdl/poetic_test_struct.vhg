--
-- VHDL Architecture Messy_test.poetic_test.struct
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 11:05:38 11.08.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Messy_test;
LIBRARY Modulation;
LIBRARY Poetic;
LIBRARY Poetic_test;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF poetic_test IS

    -- Architecture declarations
    constant signalBitNb: positive := 12;
    constant adcBitNb: integer := 12;
    constant dataBitNb: positive := 16;
    constant phaseBitNb: positive := 16;
    constant pidBitNb: integer := 12;
    constant inputBitNb: positive := 12;
    constant outputBitNb : positive := 12;
    constant dacBitNb : positive := 8;
    constant dacChBitNb : positive := 2;
    constant dacOpBitNb : positive := 2;

    -- Internal signal declarations
    SIGNAL ADC_SCLK   : std_ulogic;
    SIGNAL CS_n       : std_ulogic;
    SIGNAL DAC_SCLK   : std_ulogic;
    SIGNAL Hall_A     : std_ulogic;
    SIGNAL Hall_B     : std_ulogic;
    SIGNAL Hall_C     : std_ulogic;
    SIGNAL SDO        : std_ulogic;
    SIGNAL Setval     : std_ulogic_vector(pidBitNb-1 DOWNTO 0);
    SIGNAL clock      : std_logic;
    SIGNAL dacData    : std_ulogic_vector(dacBitNb-1 DOWNTO 0);
    SIGNAL dacMode    : std_ulogic_vector(dacOpBitNb-1 DOWNTO 0);
    SIGNAL dacSel     : std_ulogic_vector(dacChBitNb-1 DOWNTO 0);
    SIGNAL enable     : std_ulogic;
    SIGNAL lowpassIn  : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL lowpassOut : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL notenable  : std_ulogic;
    SIGNAL output     : unsigned(pidBitNb-1 DOWNTO 0);
    SIGNAL reset      : std_logic;
    SIGNAL send       : std_ulogic;
    SIGNAL serialOut  : std_ulogic;
    SIGNAL speed      : std_ulogic_vector(11 DOWNTO 0);
    SIGNAL speed1     : std_ulogic_vector(11 DOWNTO 0);
    SIGNAL speed_mes  : std_ulogic_vector(11 DOWNTO 0);


    -- Component Declarations
    COMPONENT messy_tester
    GENERIC (
        adcBitNb   : integer  := 8;
        phaseBitNb : positive := 16;
        pidBitNb   : positive := 12;
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT (
        Setval    : OUT    std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock     : OUT    std_logic ;
        dacData   : OUT    std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        dacMode   : OUT    std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        dacSel    : OUT    std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        enable    : OUT    std_ulogic ;
        notenable : OUT    std_ulogic ;
        reset     : OUT    std_logic ;
        send      : OUT    std_ulogic ;
        Hall_A    : OUT    std_ulogic ;
        Hall_B    : OUT    std_ulogic ;
        Hall_C    : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT pwmModulator
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        clock      : IN     std_ulogic ;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        reset      : IN     std_ulogic ;
        serialOut  : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT ADC
    GENERIC (
        adcBitNb    : integer := 12;
        highSpeedEn : natural := 0
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        SDO    : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        enable : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CS_n   : OUT    std_ulogic ;
        Data   : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT BLDCController
    PORT (
        Hall_A : IN     std_ulogic ;
        Hall_B : IN     std_ulogic ;
        Hall_C : IN     std_ulogic ;
        PWM_in : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        Sa_bot : OUT    std_ulogic ;
        Sa_top : OUT    std_ulogic ;
        Sb_bot : OUT    std_ulogic ;
        Sb_top : OUT    std_ulogic ;
        Sc_bot : OUT    std_ulogic ;
        Sc_top : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT BLDCSpeedController
    PORT (
        Hall_A : IN     std_ulogic ;
        Hall_B : IN     std_ulogic ;
        Hall_C : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        speed  : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT DAC
    GENERIC (
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        dacSel : IN     std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        data   : IN     std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        mode   : IN     std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        reset  : IN     std_ulogic ;
        send   : IN     std_ulogic ;
        Dout   : OUT    std_ulogic ;
        Sync_n : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT clockGenerator
    GENERIC (
        counterBitNb : integer := 12;
        frequencyIn  : integer := 100000000;
        frequencyOut : integer := 20000000
    );
    PORT (
        clock    : IN     std_ulogic ;
        enable   : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        clockOut : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT regulator
    GENERIC (
        pidBitNb : positive := 12
    );
    PORT (
        Setval        : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        adc_data      : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock         : IN     std_ulogic ;
        kd_sw         : IN     std_ulogic ;
        ki_sw         : IN     std_ulogic ;
        kp_sw         : IN     std_ulogic ;
        on_off_switch : IN     std_ulogic ;
        reset         : IN     std_ulogic ;
        update        : IN     std_ulogic ;
        output        : OUT    unsigned (pidBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT AD
    GENERIC (
        adcBitNb : positive := 12
    );
    PORT (
        CS_n       : IN     std_ulogic ;
        DataToSend : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        SCLK       : IN     std_ulogic ;
        clock      : IN     std_logic ;
        reset      : IN     std_logic ;
        SDO        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT motor
    PORT (
        Vapp  : IN     unsigned (11 DOWNTO 0);
        clock : IN     std_logic ;
        reset : IN     std_logic ;
        speed : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT lowpass
    GENERIC (
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT (
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : AD USE ENTITY Poetic_test.AD;
    FOR ALL : ADC USE ENTITY Poetic.ADC;
    FOR ALL : BLDCController USE ENTITY Poetic.BLDCController;
    FOR ALL : BLDCSpeedController USE ENTITY Poetic.BLDCSpeedController;
    FOR ALL : DAC USE ENTITY Poetic.DAC;
    FOR ALL : clockGenerator USE ENTITY Poetic.clockGenerator;
    FOR ALL : lowpass USE ENTITY WaveformGenerator.lowpass;
    FOR ALL : messy_tester USE ENTITY Messy_test.messy_tester;
    FOR ALL : motor USE ENTITY Poetic_test.motor;
    FOR ALL : pwmModulator USE ENTITY Modulation.pwmModulator;
    FOR ALL : regulator USE ENTITY Poetic.regulator;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    -- eb1 1                                        
    LowpassIn <= (others => serialOut);


    -- Instance port mappings.
    I_tester : messy_tester
        GENERIC MAP (
            adcBitNb   => 12,
            phaseBitNb => 16,
            pidBitNb   => 12,
            dacBitNb   => 8,
            dacChBitNb => 2,
            dacOpBitNb => 2
        )
        PORT MAP (
            Setval    => Setval,
            clock     => clock,
            dacData   => dacData,
            dacMode   => dacMode,
            dacSel    => dacSel,
            enable    => enable,
            notenable => notenable,
            reset     => reset,
            send      => send,
            Hall_A    => Hall_A,
            Hall_B    => Hall_B,
            Hall_C    => Hall_C
        );
    I43 : pwmModulator
        GENERIC MAP (
            signalBitNb => 12
        )
        PORT MAP (
            clock      => clock,
            parallelIn => output,
            reset      => reset,
            serialOut  => serialOut
        );
    I3 : ADC
        GENERIC MAP (
            adcBitNb    => 12,
            highSpeedEn => 0
        )
        PORT MAP (
            SCLK   => ADC_SCLK,
            SDO    => SDO,
            clock  => clock,
            enable => enable,
            reset  => reset,
            CS_n   => CS_n,
            Data   => speed
        );
    I7 : BLDCController
        PORT MAP (
            Hall_A => Hall_A,
            Hall_B => Hall_B,
            Hall_C => Hall_C,
            PWM_in => serialOut,
            clock  => clock,
            reset  => reset,
            Sa_bot => OPEN,
            Sa_top => OPEN,
            Sb_bot => OPEN,
            Sb_top => OPEN,
            Sc_bot => OPEN,
            Sc_top => OPEN
        );
    I10 : BLDCSpeedController
        PORT MAP (
            Hall_A => Hall_A,
            Hall_B => Hall_B,
            Hall_C => Hall_C,
            clock  => clock,
            reset  => reset,
            speed  => speed1
        );
    I6 : DAC
        GENERIC MAP (
            dacBitNb   => 8,
            dacChBitNb => 2,
            dacOpBitNb => 2
        )
        PORT MAP (
            SCLK   => DAC_SCLK,
            clock  => clock,
            dacSel => dacSel,
            data   => dacData,
            mode   => dacMode,
            reset  => reset,
            send   => send,
            Dout   => OPEN,
            Sync_n => OPEN
        );
    I5 : clockGenerator
        GENERIC MAP (
            counterBitNb => 10,
            frequencyIn  => 100000000,
            frequencyOut => 40000000
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => DAC_SCLK
        );
    I9 : clockGenerator
        GENERIC MAP (
            counterBitNb => 10,
            frequencyIn  => 100000000,
            frequencyOut => 20000000
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => ADC_SCLK
        );
    I8 : regulator
        GENERIC MAP (
            pidBitNb => 12
        )
        PORT MAP (
            Setval        => Setval,
            adc_data      => speed,
            clock         => clock,
            kd_sw         => enable,
            ki_sw         => enable,
            kp_sw         => enable,
            on_off_switch => enable,
            reset         => reset,
            update        => CS_n,
            output        => output
        );
    I1 : AD
        GENERIC MAP (
            adcBitNb => 12
        )
        PORT MAP (
            CS_n       => CS_n,
            DataToSend => speed_mes,
            SCLK       => ADC_SCLK,
            clock      => clock,
            reset      => reset,
            SDO        => SDO
        );
    I0 : motor
        PORT MAP (
            Vapp  => lowpassOut,
            clock => clock,
            reset => reset,
            speed => speed_mes
        );
    I4 : lowpass
        GENERIC MAP (
            signalBitNb => 12,
            shiftBitNb  => 16
        )
        PORT MAP (
            lowpassOut => lowpassOut,
            clock      => clock,
            reset      => reset,
            lowpassIn  => lowpassIn
        );

END struct;
