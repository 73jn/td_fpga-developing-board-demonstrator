-- VHDL Entity Poetic_test.poetic_test.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 13:07:27 02/19/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--


ENTITY poetic_test IS
-- Declarations

END poetic_test ;





-- VHDL Entity Poetic_test.motor.symbol
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 14:40:28 02.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

ENTITY motor IS
    PORT( 
        Vapp  : IN     unsigned (11 DOWNTO 0);
        clock : IN     std_logic;
        reset : IN     std_logic;
        speed : OUT    std_ulogic_vector (11 DOWNTO 0)
    );

-- Declarations

END motor ;





--
-- VHDL Architecture Poetic_test.motor.dc
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 14:32:12 01.07.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE dc OF motor IS
  constant clockFrequency: real := 10.0E03;
  constant clockPeriod: real := (1.0/clockFrequency);
  constant L : real := 0.1;
  constant Kphi : real := 0.2;
  constant J : real := 0.1;
  constant B : real := 0.1;
  constant R : real := 2.0;
BEGIN
  decode : process(reset, clock)
    variable di_dt : real;
    variable dw_dt : real;
    variable w : real;
    variable i : real;
  begin
    if reset = '1' then
      di_dt := 0.0;
      dw_dt := 0.0;
      i := 0.0;
      w := 0.0;
      speed <= (others => '0');
    elsif rising_edge(clock) then
      di_dt := (real(to_integer(Vapp))/L) - ((R/L) * i) - ((Kphi/L)*w);
      dw_dt := ((Kphi/J) * i) - ((B/J) * w);
      w := w + dw_dt * clockPeriod;
      i := i + di_dt * clockPeriod;
      speed <= std_logic_vector(to_unsigned(integer(w), speed'length));
    end if;
  end process decode;
END ARCHITECTURE dc;





-- VHDL Entity Poetic_test.AD.symbol
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 16:19:18 30.06.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

ENTITY AD IS
    GENERIC( 
        adcBitNb : positive := 12
    );
    PORT( 
        CS_n       : IN     std_ulogic;
        DataToSend : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        SCLK       : IN     std_ulogic;
        clock      : IN     std_logic;
        reset      : IN     std_logic;
        SDO        : OUT    std_ulogic
    );

-- Declarations

END AD ;





--
-- VHDL Architecture Poetic_test.AD.ADS7886
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 15:32:09 30.06.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE ADS7886 OF AD IS
  type decodeState is (
    waitHighCS, sendData, sendZeros, waitLowCS, incrementCounterSendData
  );
  signal mainState : decodeState;
  signal memCS, fallingCS : std_ulogic;
  signal memSCLK, fallingSCLK : std_ulogic;

BEGIN
  decode : process(reset, clock)
    variable counterWaitData : integer;
    variable counterSendData : integer;
  begin
    if reset = '1' then
      mainState <= waitLowCS;
      counterWaitData := 0;
      counterSendData := 0;
    elsif rising_edge(clock) then
      case mainState is 
        when waitLowCS =>
          if fallingCS = '1' then
            mainState <= sendZeros;
          end if;
        when sendZeros =>
          if fallingSCLK = '1' then
            counterWaitData := counterWaitData + 1;
            SDO <= '0';
            if counterWaitData = 3 then
              mainState <= sendData;
              counterWaitData := 0;
            end if;
          end if;
        when sendData =>
          if fallingSCLK = '1' then
            if counterSendData >= adcBitNb then
              mainState <= waitHighCS;
              SDO <= '0';
              counterSendData := 0;
            else
              SDO <= DataToSend(adcBitNb-1 - counterSendData);
              mainState <= incrementCounterSendData;
            end if;
          end if;
        when incrementCounterSendData =>
          counterSendData := counterSendData + 1;
          mainState <= sendData;
        when waitHighCS =>
          if CS_n = '1' then
            mainState <= waitLowCS;
          end if;
      end case;
    end if;
  end process decode;
  
  detectFallingCS : process (reset, clock)
  begin
    if reset = '1' then
      memCS <= '1';
      fallingCS <= '0';
    elsif rising_edge(clock) then
      fallingCS <= '0';
      if memCS = '1' AND CS_n = '0' then
        fallingCS <= '1';
        memCS <= CS_n;
      else
        memCS <= CS_n;
      end if;
    end if;
  end process detectFallingCS;
  detectFallingSCLK : process (reset, clock)
  begin
    if reset = '1' then
      memSCLK <= '0';
      fallingSCLK <= '0';
    elsif rising_edge(clock) then
      fallingSCLK <= '0';
      if memSCLK = '1' AND SCLK = '0' then
        fallingSCLK <= '1';
        memSCLK <= SCLK;
      else
        memSCLK <= SCLK;
      end if;
    end if;
  end process detectFallingSCLK;
END ARCHITECTURE ADS7886;





-- VHDL Entity Poetic.BLDCSpeedController.symbol
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 14:26:10 27.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY BLDCSpeedController IS
    PORT( 
        Hall_A : IN     std_ulogic;
        Hall_B : IN     std_ulogic;
        Hall_C : IN     std_ulogic;
        clock  : IN     std_ulogic;
        reset  : IN     std_ulogic;
        speed  : OUT    std_ulogic_vector (11 DOWNTO 0)
    );

-- Declarations

END BLDCSpeedController ;





--
-- VHDL Architecture Poetic.BLDCSpeedController.BLDC
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 11:39:58 27.07.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE BLDC OF BLDCSpeedController IS
  type State is (
    count, print, setToZero
  );
  signal mainState : State;
  signal hallReg : std_ulogic_vector(2 DOWNTO 0);
  signal oneSecondPassed : std_ulogic;
  signal rotationHappen : std_ulogic;
  signal old_hallReg : std_ulogic_vector(2 DOWNTO 0);
BEGIN
  process (clock, reset)
    variable bigCounter : integer;
  begin
    if reset = '1' then
      bigCounter := 0;
      oneSecondPassed <= '0';
    elsif rising_edge(clock) then
	    bigCounter := bigCounter + 1;
      if (bigCounter > 10000000) then
        bigCounter := 0;
        oneSecondPassed <= '1';
      else
        oneSecondPassed <= '0';
      end if;
    end if;
  end process;
  countNumberOfRotationPerSecond : process (clock, reset)
    variable rotationCounter : integer;
  begin
    if reset = '1' then
      rotationCounter := 0;
      mainState <= count;
      speed <= (others => '0');
    elsif rising_edge(clock) then
      case mainState is 
        when count =>
          if oneSecondPassed = '1' then
            mainState <= print;
          end if;
          if rotationHappen = '1' then
            rotationCounter := rotationCounter + 1;
          end if;
        when print =>
          speed <= std_ulogic_vector(resize(10*shift_right(to_unsigned(rotationCounter, speed'length),1), speed'length)); -- * 10/2 pour tr/secondes
          mainState <= setToZero;
        when setToZero =>
          rotationCounter := 0;
          mainState <= count;
      end case;
    end if;
  end process countNumberOfRotationPerSecond;
  
  mecRotationDetect : process (reset, clock)
  begin
    if reset = '1' then
      rotationHappen <= '0';
    elsif rising_edge(clock) then
      if old_hallReg /= hallReg then
        old_hallReg <= hallReg;
        if hallReg = "001" then
          rotationHappen <= '1';
        else
          rotationHappen <= '0';
        end if;
      else
        rotationHappen <= '0';
      end if;
      
    end if;
  end process mecRotationDetect;

  updateHallReg : process (Hall_A, Hall_B, Hall_C)
  begin
    hallReg <= Hall_A & Hall_B & Hall_C;
  end process updateHallReg;
END ARCHITECTURE BLDC;





-- VHDL Entity Poetic.ADC.symbol
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 16:51:57 30.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY ADC IS
    GENERIC( 
        adcBitNb    : integer := 12;
        highSpeedEn : natural := 0
    );
    PORT( 
        SCLK   : IN     std_ulogic;
        SDO    : IN     std_ulogic;
        clock  : IN     std_ulogic;
        enable : IN     std_ulogic;
        reset  : IN     std_ulogic;
        CS_n   : OUT    std_ulogic;
        Data   : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0)
    );

-- Declarations

END ADC ;





--
-- VHDL Architecture Poetic.ADC.ads7886_decoder
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 14:09:37 17.06.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE ads7886_decoder OF ADC IS
  type decodeState is (
    sendLowCS, waitForData, readData, sendHighCS, ready, print
  );
  signal mainState : decodeState;
  signal memSCLK, risingSCLK : std_ulogic;
  signal counterWaitData : unsigned(1 DOWNTO 0);
  signal counterReadData : unsigned(10 DOWNTO 0);
  signal dataReg : unsigned(adcBitNb-1 DOWNTO 0);
BEGIN
  decode : process(reset, clock)
    variable counterTq : integer;
  begin
    if reset = '1' then
      counterTq := 0;
      mainState <= ready;
      Data <= (others => '0');
      CS_n <= '1';
      counterReadData <= (others => '0');
      counterWaitData <= (others => '0');
      dataReg <= (others => '0');
    elsif rising_edge(clock) then
      case mainState is 
        when ready =>
          if enable = '1' AND risingSCLK = '1' then
            counterTq := 0;
            mainState <= sendLowCS;
          end if;
        when sendLowCS =>
          CS_n <= '0';
          mainState <= waitForData;
        when waitForData =>
          if risingSCLK = '1' then
            counterWaitData <= counterWaitData +1;
            if counterWaitData = 3 + highSpeedEn then
              mainState <= readData;
              counterWaitData <= (others => '0');
            end if;
          end if;
        when readData =>
          if risingSCLK = '1' then
            counterReadData <= counterReadData + 1;
            dataReg <= shift_left(dataReg, 1);
            dataReg(dataReg'low) <= SDO;
            if (counterReadData = adcBitNb-1) then
              counterReadData <= (others => '0');
              mainState <= print;
            end if;
          end if;
        when print =>
          Data <= std_ulogic_vector(dataReg);
          mainState <= sendHighCS;
        when sendHighCS =>
            if risingSCLK = '1' then
              CS_n <= '1';
              counterTq := counterTq + 1;
              if counterTq = 2 then
                mainState <= ready;
              end if;
            end if;
      end case;
    end if;
  end process decode;
  
  detectRisingSCLK : process (reset, clock)
  begin
    if reset = '1' then
      memSCLK <= '0';
      risingSCLK <= '0';
    elsif rising_edge(clock) then
      risingSCLK <= '0';
      if memSCLK = '0' AND SCLK = '1' then
        risingSCLK <= '1';
        memSCLK <= SCLK;
      else
        memSCLK <= SCLK;
      end if;
    end if;
  end process detectRisingSCLK;
END ARCHITECTURE ads7886_decoder;





-- VHDL Entity WaveformGenerator.lowpass.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 08:02:49 03/11/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY lowpass IS
    GENERIC( 
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT( 
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic;
        reset      : IN     std_ulogic;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );

-- Declarations

END lowpass ;





ARCHITECTURE studentVersion OF lowpass IS
  signal acc : unsigned (lowpassIn'high + shiftBitNb downto 0);
BEGIN
  lowp: process(reset, clock)
  begin
  if reset = '1' then
    acc <= (others => '0');
  elsif rising_edge(clock) then
    acc <= acc + lowpassIn  - shift_right(acc, shiftBitNb);
  end if;
  end process lowp;
    lowpassOut <= resize(shift_right(acc,shiftBitNb),lowpassOut'length);
END ARCHITECTURE studentVersion;



-- VHDL Entity Modulation.pwmModulator.symbol
--
-- Created:
--          by - francois.francois (Aphelia)
--          at - 16:13:13 10/29/19
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY pwmModulator IS
    GENERIC( 
        signalBitNb : positive := 16
    );
    PORT( 
        clock      : IN     std_ulogic;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        reset      : IN     std_ulogic;
        serialOut  : OUT    std_ulogic
    );

-- Declarations

END pwmModulator ;





ARCHITECTURE RTL OF pwmModulator IS

  signal sawtooth : unsigned(parallelIn'range);

BEGIN
  ------------------------------------------------------------------------------
                                                              -- sawtooth signal
  buildSawtooth: process(clock, reset)
  begin
    if reset = '1' then
      sawtooth <= (others => '0');
    elsif rising_edge(clock) then
      sawtooth <= sawtooth + 1;
    end if;
  end process buildSawtooth;

  ------------------------------------------------------------------------------
                                                    -- compare with input signal
  buildPwm: process(sawtooth, parallelIn)
  begin
    if parallelIn > sawtooth then
      serialOut <= '1';
    else
      serialOut <= '0';
    end if;
  end process buildPwm;

END ARCHITECTURE RTL;




-- VHDL Entity Poetic.clockGenerator.symbol
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 11:08:27 30.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY clockGenerator IS
    GENERIC( 
        counterBitNb : integer := 12;
        frequencyIn  : integer := 100000000;
        frequencyOut : integer := 20000000
    );
    PORT( 
        clock    : IN     std_ulogic;
        enable   : IN     std_ulogic;
        reset    : IN     std_ulogic;
        clockOut : OUT    std_ulogic
    );

-- Declarations

END clockGenerator ;





--
-- VHDL Architecture Poetic.clockGenerator.clockDivider
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 11:15:13 17.06.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE clockDivider OF clockGenerator IS
  constant countValue : integer := integer(real(integer(real(frequencyIn) / real((frequencyOut)))) / 2.0);
  signal counter : unsigned(counterBitNb-1 DOWNTO 0);
  signal clockOut_int : std_ulogic;
BEGIN
  clockOut <= clockOut_int;
  increment : process(reset, clock)
  begin
    if reset = '1' then
	  clockOut_int <= '0';
      counter <= (others => '0');
      counter(counter'low) <= '1';
    elsif rising_edge(clock) then
      if enable = '1' then
        counter <= counter + 1;
          if (counter >= countValue) then
            clockOut_int <= not clockOut_int;
            counter <= (others => '0');
            counter(counter'low) <= '1';
          end if;
      else
        clockOut_int <= '0';
      end if;
    end if;
  end process increment;
END ARCHITECTURE clockDivider;





-- VHDL Entity Poetic.DAC.symbol
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 11:29:40 14.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY DAC IS
    GENERIC( 
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT( 
        SCLK   : IN     std_ulogic;
        clock  : IN     std_ulogic;
        dacSel : IN     std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        data   : IN     std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        mode   : IN     std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        reset  : IN     std_ulogic;
        send   : IN     std_ulogic;
        Dout   : OUT    std_ulogic;
        Sync_n : OUT    std_ulogic
    );

-- Declarations

END DAC ;





--
-- VHDL Architecture Poetic.DAC.DAC124S085
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 09:21:02 18.06.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE DAC124S085 OF DAC IS
  signal memSCLK, risingSCLK : std_ulogic;
  signal masterWr : std_ulogic;
  signal masterData : std_ulogic_vector(dacBitNb+dacChBitNb+dacOpBitNb-1 DOWNTO 0);
  type transmitState is(
    waitForATransmission, sendData, sendLowSync, sendHighSync, sendFourZero
  );
  signal mainState : transmitState;
BEGIN
  concatenate : process (reset, clock)
  begin
    if reset = '1' then
      masterData <= (others => '0');
      masterWr <= '0';
    elsif rising_edge(clock) then
    masterWr <= '0';
      if send = '1' then
        masterData <= dacSel & mode & data;
        masterWr <= '1';
      end if;
    end if;
  end process concatenate;
  
  transmit : process (reset, clock)
  variable decounter : integer;
  variable counter : integer;
  begin
    if reset = '1' then
      mainState <= waitForATransmission;
      decounter := masterData'length-1;
      Sync_n <= '1';
      Dout <= '0';
	  counter := 0;
    elsif rising_edge(clock) then
      case mainState is
        when waitForATransmission =>
          if masterWr = '1' then
            mainState <= sendLowSync;
          end if;
        when sendData =>
          if risingSCLK = '1' then
            decounter := decounter - 1;
            Dout <= masterData(decounter);
            if decounter = 0 then
              mainState <= sendFourZero;
            end if;
          end if;
        when sendLowSync =>
          if risingSCLK = '1' then
            Sync_n <= '0';
            Dout <= masterData(decounter);
            mainState <= sendData;
          end if;
        when sendHighSync =>
          decounter := masterData'length-1;
		  counter := 0;
          if risingSCLK = '1' then
            Sync_n <= '1';
            mainState <= waitForATransmission;
          end if;
		when sendFourZero =>
		  if risingSCLK = '1' then
		    Dout <= '0';
			counter := counter + 1;
			if counter = 4 then
			  mainState <= sendHighSync;
			end if;
		  end if;
      end case;
    end if;
  end process transmit;
  
  detectRisingSCLK : process (reset, clock)
  begin
    if reset = '1' then
      memSCLK <= '0';
      risingSCLK <= '0';
    elsif rising_edge(clock) then
      risingSCLK <= '0';
      if memSCLK = '0' AND SCLK = '1' then
        risingSCLK <= '1';
        memSCLK <= SCLK;
      else
        memSCLK <= SCLK;
      end if;
    end if;
  end process detectRisingSCLK;
END ARCHITECTURE DAC124S085;





-- VHDL Entity Poetic.BLDCController.symbol
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 16:20:14 23.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY BLDCController IS
    PORT( 
        Hall_A : IN     std_ulogic;
        Hall_B : IN     std_ulogic;
        Hall_C : IN     std_ulogic;
        PWM_in : IN     std_ulogic;
        clock  : IN     std_ulogic;
        reset  : IN     std_ulogic;
        Sa_bot : OUT    std_ulogic;
        Sa_top : OUT    std_ulogic;
        Sb_bot : OUT    std_ulogic;
        Sb_top : OUT    std_ulogic;
        Sc_bot : OUT    std_ulogic;
        Sc_top : OUT    std_ulogic
    );

-- Declarations

END BLDCController ;





--
-- VHDL Architecture Poetic.BLDCController.BLDC
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 11:42:58 22.07.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE BLDC OF BLDCController IS
BEGIN
  logic : process (Hall_A, Hall_B, Hall_C, PWM_in)
  variable hallReg : std_ulogic_vector(2 DOWNTO 0);
  begin
    hallReg := Hall_A & Hall_B & Hall_C;
    case hallReg is
      when "001" => --Sa_top 1 & Sb_bot 1
        Sa_top <= PWM_in;
        Sa_bot <= '0';
        Sb_top <= '0';
        Sb_bot <= PWM_in;
        Sc_top <= '0';
        Sc_bot <= '0';
      when "101" => --Sa_top 1 & Sc_bot 1
        Sa_top <= PWM_in;
        Sa_bot <= '0';
        Sb_top <= '0';
        Sb_bot <= '0';
        Sc_top <= '0';
        Sc_bot <= PWM_in;
      when "100" =>
        Sa_top <= '0';
        Sa_bot <= '0';
        Sb_top <= PWM_in;
        Sb_bot <= '0';
        Sc_top <= '0';
        Sc_bot <= PWM_in;
      when "110" =>
        Sa_top <= '0';
        Sa_bot <= PWM_in;
        Sb_top <= PWM_in;
        Sb_bot <= '0';
        Sc_top <= '0';
        Sc_bot <= '0';
      when "010" =>
        Sa_top <= '0';
        Sa_bot <= PWM_in;
        Sb_top <= '0';
        Sb_bot <= '0';
        Sc_top <= PWM_in;
        Sc_bot <= '0';      
      when "011" =>
        Sa_top <= '0';
        Sa_bot <= '0';
        Sb_top <= '0';
        Sb_bot <= PWM_in;
        Sc_top <= PWM_in;
        Sc_bot <= '0'; 
      when others =>
        Sa_top <= '0';
        Sa_bot <= '0';
        Sb_top <= '0';
        Sb_bot <= '0';
        Sc_top <= '0';
        Sc_bot <= '0'; 
    end case;
  end process logic;
END ARCHITECTURE BLDC;



-- VHDL Entity Poetic.regulator.symbol
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 13:29:47 06.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;

ENTITY regulator IS
    GENERIC( 
        pidBitNb : positive := 12
    );
    PORT( 
        Setval        : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        adc_data      : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock         : IN     std_ulogic;
        kd_sw         : IN     std_ulogic;
        ki_sw         : IN     std_ulogic;
        kp_sw         : IN     std_ulogic;
        on_off_switch : IN     std_ulogic;
        reset         : IN     std_ulogic;
        update        : IN     std_ulogic;
        output        : OUT    unsigned (pidBitNb-1 DOWNTO 0)
    );

-- Declarations

END regulator ;





--
-- VHDL Architecture Poetic.regulator.PDI3
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 20:04:32 22.07.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE PDI3 OF regulator IS
  type State is (
    ready, calculateNewError,calculatePID, checkOverFlow, print
  );
  constant Kp : integer := 16;
  constant Ki : integer := 1;
  signal mainState : State;
  signal updatePID : std_ulogic;
  signal PIDHasBeenUpdate : std_ulogic;
  signal error : signed(pidBitNb DOWNTO 0);
  signal error_sum : signed(pidBitNb+20 DOWNTO 0); --BIG NUMBER
  signal pidValue : signed(pidBitNb+5+1 DOWNTO 0);
  signal p : signed(pidBitNb+5 DOWNTO 0);
  signal i : signed(pidBitNb+5 DOWNTO 0);
  signal d : signed(pidBitNb+5 DOWNTO 0);
  signal sOutput : unsigned(pidBitNb-1 DOWNTO 0);
BEGIN
  process (clock, reset)
  begin
    if reset = '1' then
      output <= (others => '0');
      mainState <= ready;
      error <= (others => '0');
      p <= (others => '0');
      i <= (others => '0');
      d <= (others => '0');
      pidValue <= (others => '0');
      sOutput <= (others => '0');
      PIDHasBeenUpdate <= '0';
      error_sum <= (others => '0');
    elsif rising_edge(clock) then
      case mainState is 
        when ready =>
          mainState <= calculateNewError;
        when calculateNewError =>
          error <= signed(resize(unsigned(Setval), error'length)) - signed(resize(unsigned(adc_data), error'length));
          if updatePID = '1' then
            error_sum <= error_sum + error;
            PIDHasBeenUpdate <= '1';
          else
            PIDHasBeenUpdate <= '0';
          end if;
          mainState <= calculatePID;
        when calculatePID =>
          if kp_sw = '1' then
            p <= resize(Kp * error, p'length);
          end if;
          if ki_sw = '1' then
            i <= resize(Ki*shift_right(error_sum,0), i'length);
          end if;
          pidValue <= resize(p, pidValue'length) + resize(i, pidValue'length) + resize(d, pidValue'length);
          mainState <= checkOverFlow;
        when checkOverFlow =>
          if pidValue > 4095 then
            sOutput <= (others => '1');
          elsif pidValue < 0 then
            sOutput <= (others => '0');
          else
            sOutput <= resize(unsigned(pidValue), sOutput'length);
          end if;
          mainState <= print;
        when print => 
          mainState <= ready;
          output <= sOutput;
      end case;
    end if;
  end process;
  
  process (clock, reset)
    variable counter : integer := 0;   
  begin
    if reset = '1' then
      counter := 0;
      updatePID <= '0';
    elsif rising_edge(clock) then
      counter := counter + 1;
      if PIDHasBeenUpdate = '1' then
        updatePID <= '0';
      end if;
      if counter > 10000000 then
        updatePID <= '1';
        counter := 0;
      end if;
    end if;
  end process;
END ARCHITECTURE PDI3;





-- VHDL Entity Poetic_test.poetic_tester.interface
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 15:58:33 23.07.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

ENTITY poetic_tester IS
    GENERIC( 
        adcBitNb   : integer  := 12;
        phaseBitNb : positive := 16;
        pidBitNb   : positive := 12;
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT( 
        Setval    : OUT    std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock     : OUT    std_logic;
        dacData   : OUT    std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        dacMode   : OUT    std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        dacSel    : OUT    std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        enable    : OUT    std_ulogic;
        notenable : OUT    std_ulogic;
        reset     : OUT    std_logic;
        send      : OUT    std_ulogic;
        Hall_A    : OUT    std_ulogic;
        Hall_B    : OUT    std_ulogic;
        Hall_C    : OUT    std_ulogic
    );

-- Declarations

END poetic_tester ;





--
-- VHDL Architecture Poetic_test.poetic_tester.test
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 15:47:25 15.06.2021
--
-- using Mentor Graphics HDL Designer(TM) 2019.2 (Build 5)
--
ARCHITECTURE test OF poetic_tester IS
  constant clockFrequency: real := 66.0E6;
  constant clockPeriod: time := (1.0/clockFrequency) * 1 sec;
  signal sClock: std_uLogic := '1';
BEGIN
  ------------------------------------------------------------------------------
                                                              -- clock and reset
  sClock <= not sClock after clockPeriod/2;
  clock <= transport sClock after clockPeriod*9/10;
  reset <= '1', '0' after 2*clockPeriod;

  ------------------------------------------------------------------------------
                                                                       -- enable
                                                                       
  enable <= '0', '1' after 1 us;
  notenable <= '0';
  SetVal <= "000000000000", "011111111111" after 15 us;
  dacData <= "00000000", "01010010" after 10 us;
  dacSel <= "11";
  dacMode <= "01";
  send <= '0', '1' after 11 us;
END ARCHITECTURE test;





--
-- VHDL Architecture Poetic_test.poetic_test.struct
--
-- Created:
--          by - jean.nanchen.UNKNOWN (WEA30407)
--          at - 11:59:15 09.08.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.ALL;

LIBRARY Modulation;
LIBRARY Poetic;
LIBRARY Poetic_test;
LIBRARY WaveformGenerator;

ARCHITECTURE struct OF poetic_test IS

    -- Architecture declarations
    constant signalBitNb: positive := 12;
    constant adcBitNb: integer := 12;
    constant dataBitNb: positive := 16;
    constant phaseBitNb: positive := 16;
    constant pidBitNb: integer := 12;
    constant inputBitNb: positive := 12;
    constant outputBitNb : positive := 12;
    constant dacBitNb : positive := 8;
    constant dacChBitNb : positive := 2;
    constant dacOpBitNb : positive := 2;

    -- Internal signal declarations
    SIGNAL ADC_SCLK   : std_ulogic;
    SIGNAL CS_n       : std_ulogic;
    SIGNAL DAC_SCLK   : std_ulogic;
    SIGNAL Data       : std_ulogic_vector(adcBitNb-1 DOWNTO 0);
    SIGNAL Hall_A     : std_ulogic;
    SIGNAL Hall_B     : std_ulogic;
    SIGNAL Hall_C     : std_ulogic;
    SIGNAL SDO        : std_ulogic;
    SIGNAL Setval     : std_ulogic_vector(pidBitNb-1 DOWNTO 0);
    SIGNAL clock      : std_logic;
    SIGNAL dacData    : std_ulogic_vector(dacBitNb-1 DOWNTO 0);
    SIGNAL dacMode    : std_ulogic_vector(dacOpBitNb-1 DOWNTO 0);
    SIGNAL dacSel     : std_ulogic_vector(dacChBitNb-1 DOWNTO 0);
    SIGNAL enable     : std_ulogic;
    SIGNAL lowpassIn  : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL lowpassOut : unsigned(signalBitNb-1 DOWNTO 0);
    SIGNAL notenable  : std_ulogic;
    SIGNAL output     : unsigned(pidBitNb-1 DOWNTO 0);
    SIGNAL reset      : std_logic;
    SIGNAL send       : std_ulogic;
    SIGNAL serialOut  : std_ulogic;
    SIGNAL speed      : std_ulogic_vector(11 DOWNTO 0);
    SIGNAL speed1     : std_ulogic_vector(11 DOWNTO 0);


    -- Component Declarations
    COMPONENT pwmModulator
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        clock      : IN     std_ulogic ;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        reset      : IN     std_ulogic ;
        serialOut  : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT ADC
    GENERIC (
        adcBitNb    : integer := 12;
        highSpeedEn : natural := 0
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        SDO    : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        enable : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CS_n   : OUT    std_ulogic ;
        Data   : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT BLDCController
    PORT (
        Hall_A : IN     std_ulogic ;
        Hall_B : IN     std_ulogic ;
        Hall_C : IN     std_ulogic ;
        PWM_in : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        Sa_bot : OUT    std_ulogic ;
        Sa_top : OUT    std_ulogic ;
        Sb_bot : OUT    std_ulogic ;
        Sb_top : OUT    std_ulogic ;
        Sc_bot : OUT    std_ulogic ;
        Sc_top : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT BLDCSpeedController
    PORT (
        Hall_A : IN     std_ulogic ;
        Hall_B : IN     std_ulogic ;
        Hall_C : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        speed  : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT DAC
    GENERIC (
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        dacSel : IN     std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        data   : IN     std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        mode   : IN     std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        reset  : IN     std_ulogic ;
        send   : IN     std_ulogic ;
        Dout   : OUT    std_ulogic ;
        Sync_n : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT clockGenerator
    GENERIC (
        counterBitNb : integer := 12;
        frequencyIn  : integer := 100000000;
        frequencyOut : integer := 20000000
    );
    PORT (
        clock    : IN     std_ulogic ;
        enable   : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        clockOut : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT regulator
    GENERIC (
        pidBitNb : positive := 12
    );
    PORT (
        Setval        : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        adc_data      : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock         : IN     std_ulogic ;
        kd_sw         : IN     std_ulogic ;
        ki_sw         : IN     std_ulogic ;
        kp_sw         : IN     std_ulogic ;
        on_off_switch : IN     std_ulogic ;
        reset         : IN     std_ulogic ;
        update        : IN     std_ulogic ;
        output        : OUT    unsigned (pidBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT AD
    GENERIC (
        adcBitNb : positive := 12
    );
    PORT (
        CS_n       : IN     std_ulogic ;
        DataToSend : IN     std_ulogic_vector (adcBitNb-1 DOWNTO 0);
        SCLK       : IN     std_ulogic ;
        clock      : IN     std_logic ;
        reset      : IN     std_logic ;
        SDO        : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT motor
    PORT (
        Vapp  : IN     unsigned (11 DOWNTO 0);
        clock : IN     std_logic ;
        reset : IN     std_logic ;
        speed : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT poetic_tester
    GENERIC (
        adcBitNb   : integer  := 12;
        phaseBitNb : positive := 16;
        pidBitNb   : positive := 12;
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT (
        Setval    : OUT    std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock     : OUT    std_logic ;
        dacData   : OUT    std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        dacMode   : OUT    std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        dacSel    : OUT    std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        enable    : OUT    std_ulogic ;
        notenable : OUT    std_ulogic ;
        reset     : OUT    std_logic ;
        send      : OUT    std_ulogic ;
        Hall_A    : OUT    std_ulogic ;
        Hall_B    : OUT    std_ulogic ;
        Hall_C    : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT lowpass
    GENERIC (
        signalBitNb : positive := 16;
        shiftBitNb  : positive := 12
    );
    PORT (
        lowpassOut : OUT    unsigned (signalBitNb-1 DOWNTO 0);
        clock      : IN     std_ulogic ;
        reset      : IN     std_ulogic ;
        lowpassIn  : IN     unsigned (signalBitNb-1 DOWNTO 0)
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : AD USE ENTITY Poetic_test.AD;
    FOR ALL : ADC USE ENTITY Poetic.ADC;
    FOR ALL : BLDCController USE ENTITY Poetic.BLDCController;
    FOR ALL : BLDCSpeedController USE ENTITY Poetic.BLDCSpeedController;
    FOR ALL : DAC USE ENTITY Poetic.DAC;
    FOR ALL : clockGenerator USE ENTITY Poetic.clockGenerator;
    FOR ALL : lowpass USE ENTITY WaveformGenerator.lowpass;
    FOR ALL : motor USE ENTITY Poetic_test.motor;
    FOR ALL : poetic_tester USE ENTITY Poetic_test.poetic_tester;
    FOR ALL : pwmModulator USE ENTITY Modulation.pwmModulator;
    FOR ALL : regulator USE ENTITY Poetic.regulator;
    -- pragma synthesis_on


BEGIN
    -- Architecture concurrent statements
    -- HDL Embedded Text Block 1 eb1
    -- eb1 1                                        
    LowpassIn <= (others => serialOut);


    -- Instance port mappings.
    I43 : pwmModulator
        GENERIC MAP (
            signalBitNb => 12
        )
        PORT MAP (
            clock      => clock,
            parallelIn => output,
            reset      => reset,
            serialOut  => serialOut
        );
    I3 : ADC
        GENERIC MAP (
            adcBitNb    => 12,
            highSpeedEn => 0
        )
        PORT MAP (
            SCLK   => ADC_SCLK,
            SDO    => SDO,
            clock  => clock,
            enable => enable,
            reset  => reset,
            CS_n   => CS_n,
            Data   => Data
        );
    I7 : BLDCController
        PORT MAP (
            Hall_A => Hall_A,
            Hall_B => Hall_B,
            Hall_C => Hall_C,
            PWM_in => serialOut,
            clock  => clock,
            reset  => reset,
            Sa_bot => OPEN,
            Sa_top => OPEN,
            Sb_bot => OPEN,
            Sb_top => OPEN,
            Sc_bot => OPEN,
            Sc_top => OPEN
        );
    I10 : BLDCSpeedController
        PORT MAP (
            Hall_A => Hall_A,
            Hall_B => Hall_B,
            Hall_C => Hall_C,
            clock  => clock,
            reset  => reset,
            speed  => speed1
        );
    I6 : DAC
        GENERIC MAP (
            dacBitNb   => 8,
            dacChBitNb => 2,
            dacOpBitNb => 2
        )
        PORT MAP (
            SCLK   => DAC_SCLK,
            clock  => clock,
            dacSel => dacSel,
            data   => dacData,
            mode   => dacMode,
            reset  => reset,
            send   => send,
            Dout   => OPEN,
            Sync_n => OPEN
        );
    I5 : clockGenerator
        GENERIC MAP (
            counterBitNb => 10,
            frequencyIn  => 100000000,
            frequencyOut => 40000000
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => DAC_SCLK
        );
    I9 : clockGenerator
        GENERIC MAP (
            counterBitNb => 10,
            frequencyIn  => 100000000,
            frequencyOut => 20000000
        )
        PORT MAP (
            clock    => clock,
            enable   => enable,
            reset    => reset,
            clockOut => ADC_SCLK
        );
    I8 : regulator
        GENERIC MAP (
            pidBitNb => 12
        )
        PORT MAP (
            Setval        => Setval,
            adc_data      => Data,
            clock         => clock,
            kd_sw         => enable,
            ki_sw         => enable,
            kp_sw         => enable,
            on_off_switch => enable,
            reset         => reset,
            update        => CS_n,
            output        => output
        );
    I1 : AD
        GENERIC MAP (
            adcBitNb => 12
        )
        PORT MAP (
            CS_n       => CS_n,
            DataToSend => speed,
            SCLK       => ADC_SCLK,
            clock      => clock,
            reset      => reset,
            SDO        => SDO
        );
    I0 : motor
        PORT MAP (
            Vapp  => lowpassOut,
            clock => clock,
            reset => reset,
            speed => speed
        );
    I_tester : poetic_tester
        GENERIC MAP (
            adcBitNb   => 12,
            phaseBitNb => 16,
            pidBitNb   => 12,
            dacBitNb   => 8,
            dacChBitNb => 2,
            dacOpBitNb => 2
        )
        PORT MAP (
            Setval    => Setval,
            clock     => clock,
            dacData   => dacData,
            dacMode   => dacMode,
            dacSel    => dacSel,
            enable    => enable,
            notenable => notenable,
            reset     => reset,
            send      => send,
            Hall_A    => Hall_A,
            Hall_B    => Hall_B,
            Hall_C    => Hall_C
        );
    I4 : lowpass
        GENERIC MAP (
            signalBitNb => 12,
            shiftBitNb  => 16
        )
        PORT MAP (
            lowpassOut => lowpassOut,
            clock      => clock,
            reset      => reset,
            lowpassIn  => lowpassIn
        );

END struct;




