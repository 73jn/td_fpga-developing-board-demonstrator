--
-- VHDL Architecture Poetic.SimplePoeticDcMotor.struct
--
-- Created:
--          by - jeann.UNKNOWN (DESKTOP-V46KISN)
--          at - 15:57:04 12.08.2021
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.2 (Build 5)
--
LIBRARY ieee;
  USE ieee.std_logic_1164.all;
  USE ieee.numeric_std.all;
LIBRARY gates;
USE gates.gates.all;

LIBRARY Board;
LIBRARY Modulation;
LIBRARY Poetic;
LIBRARY RS232;

ARCHITECTURE struct OF SimplePoeticDcMotor IS

    -- Architecture declarations

    -- Internal signal declarations
    SIGNAL Q              : std_uLogic;
    SIGNAL clockOut       : std_ulogic;
    SIGNAL consigne       : std_ulogic_vector(pidBitNb-1 DOWNTO 0);
    SIGNAL dacSel         : std_ulogic_vector(dacChBitNb-1 DOWNTO 0);
    SIGNAL endOfMsg       : std_ulogic;
    SIGNAL in1            : std_uLogic;
    SIGNAL logic_0        : std_uLogic;
    SIGNAL logic_1        : std_uLogic;
    SIGNAL mode           : std_ulogic_vector(dacOpBitNb-1 DOWNTO 0);
    SIGNAL newCharacter   : std_ulogic;
    SIGNAL out1           : std_uLogic;
    SIGNAL output         : unsigned(pidBitNb-1 DOWNTO 0);
    SIGNAL rxData         : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL rxEmpty        : std_ulogic;
    SIGNAL rxRd           : std_ulogic;
    SIGNAL serialConsigne : std_ulogic_vector(dataBitNb-1 DOWNTO 0);
    SIGNAL speed          : std_ulogic_vector(11 DOWNTO 0);
    SIGNAL txFull         : std_ulogic;

    -- Implicit buffer signal declarations
    SIGNAL ADC_SCLK_internal  : std_ulogic;
    SIGNAL DAC0_SCLK_internal : std_ulogic;


    -- Component Declarations
    COMPONENT DFF
    PORT (
        CLK : IN     std_uLogic ;
        CLR : IN     std_uLogic ;
        D   : IN     std_uLogic ;
        Q   : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT and2inv1
    GENERIC (
        delay : time := gateDelay
    );
    PORT (
        in1  : IN     std_uLogic ;
        in2  : IN     std_uLogic ;
        out1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic0
    PORT (
        logic_0 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT logic1
    PORT (
        logic_1 : OUT    std_uLogic 
    );
    END COMPONENT;
    COMPONENT pwmModulator
    GENERIC (
        signalBitNb : positive := 16
    );
    PORT (
        clock      : IN     std_ulogic ;
        parallelIn : IN     unsigned (signalBitNb-1 DOWNTO 0);
        reset      : IN     std_ulogic ;
        serialOut  : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT ADC
    GENERIC (
        adcBitNb    : integer := 12;
        highSpeedEn : natural := 0
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        SDO    : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        enable : IN     std_ulogic ;
        reset  : IN     std_ulogic ;
        CS_n   : OUT    std_ulogic ;
        Data   : OUT    std_ulogic_vector (adcBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT DAC
    GENERIC (
        dacBitNb   : positive := 8;
        dacChBitNb : positive := 2;
        dacOpBitNb : positive := 2
    );
    PORT (
        SCLK   : IN     std_ulogic ;
        clock  : IN     std_ulogic ;
        dacSel : IN     std_ulogic_vector (dacChBitNb-1 DOWNTO 0);
        data   : IN     std_ulogic_vector (dacBitNb-1 DOWNTO 0);
        mode   : IN     std_ulogic_vector (dacOpBitNb-1 DOWNTO 0);
        reset  : IN     std_ulogic ;
        send   : IN     std_ulogic ;
        Dout   : OUT    std_ulogic ;
        Sync_n : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT clockGenerator
    GENERIC (
        counterBitNb : integer := 12;
        frequencyIn  : integer := 100000000;
        frequencyOut : integer := 20000000
    );
    PORT (
        clock    : IN     std_ulogic ;
        enable   : IN     std_ulogic ;
        reset    : IN     std_ulogic ;
        clockOut : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT regulator
    GENERIC (
        pidBitNb : positive := 12
    );
    PORT (
        Setval        : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        adc_data      : IN     std_ulogic_vector (pidBitNb-1 DOWNTO 0);
        clock         : IN     std_ulogic ;
        kd_sw         : IN     std_ulogic ;
        ki_sw         : IN     std_ulogic ;
        kp_sw         : IN     std_ulogic ;
        on_off_switch : IN     std_ulogic ;
        reset         : IN     std_ulogic ;
        update        : IN     std_ulogic ;
        output        : OUT    unsigned (pidBitNb-1 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT serialAsciiDecoder
    PORT (
        clock        : IN     std_ulogic ;
        consigne     : IN     std_ulogic_vector (7 DOWNTO 0);
        endOfMsg     : IN     std_ulogic ;
        newCharacter : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        output       : OUT    std_ulogic_vector (11 DOWNTO 0)
    );
    END COMPONENT;
    COMPONENT uartController
    GENERIC (
        dataBitNb : positive := 8
    );
    PORT (
        clock        : IN     std_ulogic ;
        reset        : IN     std_ulogic ;
        rxData       : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        rxEmpty      : IN     std_ulogic ;
        txFull       : IN     std_ulogic ;
        consigne     : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        endOfMsg     : OUT    std_ulogic ;
        newCharacter : OUT    std_ulogic ;
        rxRd         : OUT    std_ulogic ;
        txData       : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        txWr         : OUT    std_ulogic 
    );
    END COMPONENT;
    COMPONENT serialPortFIFO
    GENERIC (
        baudRateDivide : positive := 2083;
        dataBitNb      : positive := 8;
        txFifoDepth    : positive := 8;
        rxFifoDepth    : positive := 8
    );
    PORT (
        RxD     : IN     std_ulogic ;
        TxD     : OUT    std_ulogic ;
        clock   : IN     std_ulogic ;
        reset   : IN     std_ulogic ;
        rxEmpty : OUT    std_ulogic ;
        rxRd    : IN     std_ulogic ;
        rxData  : OUT    std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        txData  : IN     std_ulogic_vector (dataBitNb-1 DOWNTO 0);
        txFull  : OUT    std_ulogic ;
        txWr    : IN     std_ulogic 
    );
    END COMPONENT;

    -- Optional embedded configurations
    -- pragma synthesis_off
    FOR ALL : ADC USE ENTITY Poetic.ADC;
    FOR ALL : DAC USE ENTITY Poetic.DAC;
    FOR ALL : DFF USE ENTITY Board.DFF;
    FOR ALL : and2inv1 USE ENTITY Gates.and2inv1;
    FOR ALL : clockGenerator USE ENTITY Poetic.clockGenerator;
    FOR ALL : logic0 USE ENTITY Gates.logic0;
    FOR ALL : logic1 USE ENTITY Gates.logic1;
    FOR ALL : pwmModulator USE ENTITY Modulation.pwmModulator;
    FOR ALL : regulator USE ENTITY Poetic.regulator;
    FOR ALL : serialAsciiDecoder USE ENTITY Poetic.serialAsciiDecoder;
    FOR ALL : serialPortFIFO USE ENTITY RS232.serialPortFIFO;
    FOR ALL : uartController USE ENTITY Poetic.uartController;
    -- pragma synthesis_on


BEGIN

    -- Instance port mappings.
    U_15 : DFF
        PORT MAP (
            CLK => clock,
            CLR => reset,
            D   => clockOut,
            Q   => Q
        );
    U_11 : and2inv1
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => in1,
            in2  => txFull,
            out1 => out1
        );
    U_16 : and2inv1
        GENERIC MAP (
            delay => gateDelay
        )
        PORT MAP (
            in1  => clockOut,
            in2  => Q,
            out1 => in1
        );
    U_2 : logic0
        PORT MAP (
            logic_0 => logic_0
        );
    U_4 : logic0
        PORT MAP (
            logic_0 => dacSel(1)
        );
    U_5 : logic0
        PORT MAP (
            logic_0 => dacSel(0)
        );
    U_6 : logic0
        PORT MAP (
            logic_0 => mode(0)
        );
    U_14 : logic0
        PORT MAP (
            logic_0 => ledState_0
        );
    U_0 : logic1
        PORT MAP (
            logic_1 => logic_1
        );
    U_7 : logic1
        PORT MAP (
            logic_1 => mode(1)
        );
    I43 : pwmModulator
        GENERIC MAP (
            signalBitNb => pwmBitNb
        )
        PORT MAP (
            clock      => clock,
            parallelIn => output,
            reset      => reset,
            serialOut  => PWM_out
        );
    U_17 : ADC
        GENERIC MAP (
            adcBitNb    => adcBitNb,
            highSpeedEn => 0
        )
        PORT MAP (
            SCLK   => ADC_SCLK_internal,
            SDO    => ADC0_SDO,
            clock  => clock,
            enable => logic_1,
            reset  => reset,
            CS_n   => ADC0_CS,
            Data   => speed
        );
    U_1 : DAC
        GENERIC MAP (
            dacBitNb   => dacBitNb,
            dacChBitNb => dacChBitNb,
            dacOpBitNb => dacOpBitNb
        )
        PORT MAP (
            SCLK   => DAC0_SCLK_internal,
            clock  => clock,
            dacSel => dacSel,
            data   => speed(11 DOWNTO 4),
            mode   => mode,
            reset  => reset,
            send   => logic_1,
            Dout   => DAC0_SDO,
            Sync_n => DAC0_SYNC
        );
    U_3 : clockGenerator
        GENERIC MAP (
            counterBitNb => 10,
            frequencyIn  => fpgaFrequency,
            frequencyOut => dacFrequency
        )
        PORT MAP (
            clock    => clock,
            enable   => logic_1,
            reset    => reset,
            clockOut => DAC0_SCLK_internal
        );
    U_12 : clockGenerator
        GENERIC MAP (
            counterBitNb => clockDividerBitNb,
            frequencyIn  => fpgaFrequency,
            frequencyOut => uartUpdateFrequency
        )
        PORT MAP (
            clock    => clock,
            enable   => logic_1,
            reset    => reset,
            clockOut => clockOut
        );
    U_13 : clockGenerator
        GENERIC MAP (
            counterBitNb => clockDividerBitNb,
            frequencyIn  => fpgaFrequency,
            frequencyOut => ledFrequency
        )
        PORT MAP (
            clock    => clock,
            enable   => logic_1,
            reset    => reset,
            clockOut => ledState_1
        );
    U_18 : clockGenerator
        GENERIC MAP (
            counterBitNb => clockDividerBitNb,
            frequencyIn  => fpgaFrequency,
            frequencyOut => adcFrequency
        )
        PORT MAP (
            clock    => clock,
            enable   => logic_1,
            reset    => reset,
            clockOut => ADC_SCLK_internal
        );
    U_10 : regulator
        GENERIC MAP (
            pidBitNb => pidBitNb
        )
        PORT MAP (
            Setval        => consigne,
            adc_data      => speed,
            clock         => clock,
            kd_sw         => D,
            ki_sw         => I,
            kp_sw         => P,
            on_off_switch => enable,
            reset         => reset,
            update        => logic_0,
            output        => output
        );
    I23 : serialAsciiDecoder
        PORT MAP (
            clock        => clock,
            consigne     => serialConsigne,
            endOfMsg     => endOfMsg,
            newCharacter => newCharacter,
            reset        => reset,
            output       => consigne
        );
    I22 : uartController
        GENERIC MAP (
            dataBitNb => uartBitNb
        )
        PORT MAP (
            clock        => clock,
            reset        => reset,
            rxData       => rxData,
            rxEmpty      => rxEmpty,
            txFull       => txFull,
            consigne     => serialConsigne,
            endOfMsg     => endOfMsg,
            newCharacter => newCharacter,
            rxRd         => rxRd,
            txData       => OPEN,
            txWr         => OPEN
        );
    I0 : serialPortFIFO
        GENERIC MAP (
            baudRateDivide => uartBaudRateDivide,
            dataBitNb      => uartBitNb,
            txFifoDepth    => uartTxFifo,
            rxFifoDepth    => uartRxFifo
        )
        PORT MAP (
            RxD     => USB_TX,
            TxD     => USB_RX,
            clock   => clock,
            reset   => reset,
            rxEmpty => rxEmpty,
            rxRd    => rxRd,
            rxData  => rxData,
            txData  => consigne(11 DOWNTO 4),
            txFull  => txFull,
            txWr    => out1
        );

    -- Implicit buffered output assignments
    ADC_SCLK  <= ADC_SCLK_internal;
    DAC0_SCLK <= DAC0_SCLK_internal;

END struct;
